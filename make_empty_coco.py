import json
from datetime import datetime

def create_images_only_coco():
    """
    –°–æ–∑–¥–∞–µ—Ç COCO JSON —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
    """
    
    # –£–ö–ê–ñ–ò–¢–ï –í–ê–®–ò –ü–£–¢–ò –ö –§–ê–ô–õ–ê–ú –ó–î–ï–°–¨
    input_file = '/clearml_agent_cache/storage_manager/datasets/ds_ae8c12c33b324947af9ae6379d920eb8/val_annotations_class0.json'  # –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É COCO JSON —Ñ–∞–π–ª—É
    output_file = "/root/mva23/MVA2023SmallObjectDetection4SpottingBirds/anns/empty_val_annotations.json"  # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ JSON —Ñ–∞–π–ª–∞
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π COCO —Ñ–∞–π–ª
        print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: {input_file}")
        with open(input_file, 'r', encoding='utf-8') as f:
            coco_data = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        new_coco = {
            "info": coco_data.get("info", {}),
            "licenses": coco_data.get("licenses", []),
            "images": coco_data.get("images", []),
            "categories": [{"name": "bird", "supercategory": "bird", "id": 0}],  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
        if "info" in new_coco and new_coco["info"]:
            new_coco["info"]["description"] = "COCO dataset with images only"
            new_coco["info"]["year"] = datetime.now().year
            new_coco["info"]["date_created"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        else:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ –±—ã–ª–æ
            new_coco["info"] = {
                "description": "COCO dataset with images only",
                "year": datetime.now().year,
                "date_created": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(new_coco, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {output_file}")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(new_coco['images'])}")
        print(f"   - –õ–∏—Ü–µ–Ω–∑–∏–π: {len(new_coco['licenses'])}")
        print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(new_coco['categories'])}")
        
    except FileNotFoundError:
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–µ")
    except json.JSONDecodeError:
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {input_file} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è COCO —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...")
    create_images_only_coco()
    print("‚úÖ –ì–æ—Ç–æ–≤–æ!")